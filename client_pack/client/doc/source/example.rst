# ====================== Распространение приложений
===========================
# ------------------------- Документирование кода
---------------------------
# ---------------------- Документирование атрибутов
---------------------------


g = 'module attribute (module-global variable)'
"""Это документация переменной g."""

module_level_variable2 = 98765
"""int: Переменная модуля.

Можно дополнительно указывать тип переменной,
отделяя его двоеточием от описания
"""

class AClass:
    
    c = 'class attribute'
    """Это документация атрибута AClass.c."""
    
    def __init__(self):
        """Документация метода ``__init__``"""
        
        self.i = 'instance attribute'
        """Документация атрибута self.i."""

def f(x):
    """Документация функции f."""
    return x**2

f.a = 1
"""Документация атрибута фукнции f."""

# ---------------- Дополнительные строки документации
-------------------------

def function(arg):
    """Это документации функции; будет помещена в атрибут __doc__."""

    """
    Это дополнительная строка документации;
    игнорируется компилятором байт-кода
    но извлекается инструментом Docutils.
    """
    pass

def function_with_types_in_docstring(param1, param2):
    """ Пример функции с указанием типов в строках документации.
    Поддерживается аннотация типов согласно `PEP 484`_ .
    Если атрибут, параметр и возвращаемое значение имеют аннотацию по `PEP
    484`_,
    то из не нужно включать в строки документации.
    Args:
    param1 (int): Первый параметр.
    param2 (str): Второй параметр.
    Returns:
    bool: Возвращаемое значение. True - успешное завершение, False - ошибка.
    .. _`PEP 484`: https://www.python.org/dev/peps/pep-0484/
    """
    pass

def function_with_pep484_type_annotations(param1: int, param2: str) -> bool:
    """ Пример функции с аннотацией типов по PEP 484.
    Args:
    param1: Первый параметр.
    param2: Второй параметр.
    Returns:
    Возвращаемое значение. True - успешное завершение, False - ошибка.
    """
    pass